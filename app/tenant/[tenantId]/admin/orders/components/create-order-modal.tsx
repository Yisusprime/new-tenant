"use client"

import { useState, useEffect } from "react"
import { useParams } from "next/navigation"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Textarea } from "@/components/ui/textarea"
import { useBranch } from "@/lib/hooks/use-branch"
import type { Order, OrderItem, OrderType } from "@/lib/types/order"
import { orderService } from "@/lib/services/order-service"
import { productService } from "@/lib/services/product-service"
import type { Product } from "@/lib/types/product"
import { formatCurrency } from "@/lib/utils"
import { Loader2, Minus, Plus, Search, Trash2 } from "lucide-react"

interface CreateOrderModalProps {
  open: boolean
  onClose: () => void
  onOrderCreated: () => void
}

export default function CreateOrderModal({ open, onClose, onOrderCreated }: CreateOrderModalProps) {
  const { tenantId } = useParams<{ tenantId: string }>()
  const { selectedBranch } = useBranch()
  const [orderType, setOrderType] = useState<OrderType>("dine_in")
  const [customerName, setCustomerName] = useState("")
  const [customerPhone, setCustomerPhone] = useState("")
  const [customerEmail, setCustomerEmail] = useState("")
  const [tableNumber, setTableNumber] = useState("")
  const [deliveryAddress, setDeliveryAddress] = useState({
    street: "",
    number: "",
    city: "",
    zipCode: "",
    notes: "",
  })
  const [notes, setNotes] = useState("")
  const [items, setItems] = useState<OrderItem[]>([])
  const [products, setProducts] = useState<Product[]>([])
  const [loading, setLoading] = useState(false)
  const [submitting, setSubmitting] = useState(false)
  const [searchTerm, setSearchTerm] = useState("")

  useEffect(() => {
    if (open && selectedBranch) {
      fetchProducts()
    }
  }, [open, selectedBranch])

  const fetchProducts = async () => {
    if (!selectedBranch) return

    setLoading(true)
    try {
      const fetchedProducts = await productService.getProducts(tenantId, selectedBranch.id)
      setProducts(fetchedProducts)
    } catch (error) {
      console.error("Error fetching products:", error)
    } finally {
      setLoading(false)
    }
  }

  const handleAddItem = (product: Product) => {
    const existingItemIndex = items.findIndex((item) => item.productId === product.id)

    if (existingItemIndex >= 0) {
      // Increment quantity if product already in cart
      const updatedItems = [...items]
      updatedItems[existingItemIndex].quantity += 1
      updatedItems[existingItemIndex].totalPrice =
        updatedItems[existingItemIndex].quantity * updatedItems[existingItemIndex].unitPrice
      setItems(updatedItems)
    } else {
      // Add new item
      const newItem: OrderItem = {
        id: `item-${Date.now()}`,
        productId: product.id,
        productName: product.name,
        quantity: 1,
        unitPrice: product.price,
        totalPrice: product.price,
        image: product.image,
      }
      setItems([...items, newItem])
    }
  }

  const handleRemoveItem = (itemId: string) => {
    setItems(items.filter((item) => item.id !== itemId))
  }

  const handleUpdateQuantity = (itemId: string, newQuantity: number) => {
    if (newQuantity < 1) return

    setItems(
      items.map((item) => {
        if (item.id === itemId) {
          return {
            ...item,
            quantity: newQuantity,
            totalPrice: newQuantity * item.unitPrice,
          }
        }
        return item
      }),
    )
  }

  const calculateSubtotal = () => {
    return items.reduce((sum, item) => sum + item.totalPrice, 0)
  }

  const calculateTax = (subtotal: number) => {
    // Assuming 10% tax rate
    return subtotal * 0.1
  }

  const calculateTotal = (subtotal: number, tax: number) => {
    let total = subtotal + tax

    // Add delivery fee if applicable
    if (orderType === "delivery") {
      total += 5 // Assuming $5 delivery fee
    }

    return total
  }

  const handleSubmit = async () => {
    if (!selectedBranch) return

    setSubmitting(true)
    try {
      const subtotal = calculateSubtotal()
      const tax = calculateTax(subtotal)
      const total = calculateTotal(subtotal, tax)

      const newOrder: Omit<Order, "id"> = {
        tenantId,
        branchId: selectedBranch.id,
        orderNumber: "", // Will be generated by the service
        customerName,
        customerPhone: customerPhone || undefined,
        customerEmail: customerEmail || undefined,
        orderType,
        status: "pending",
        items,
        subtotal,
        tax,
        deliveryFee: orderType === "delivery" ? 5 : undefined,
        total,
        paymentStatus: "pending",
        tableNumber: orderType === "dine_in" ? tableNumber : undefined,
        deliveryAddress: orderType === "delivery" ? deliveryAddress : undefined,
        notes: notes || undefined,
        createdAt: new Date(),
        updatedAt: new Date(),
        estimatedReadyTime: new Date(Date.now() + 30 * 60 * 1000), // 30 minutes from now
      }

      await orderService.createOrder(newOrder)
      onOrderCreated()
      resetForm()
    } catch (error) {
      console.error("Error creating order:", error)
    } finally {
      setSubmitting(false)
    }
  }

  const resetForm = () => {
    setOrderType("dine_in")
    setCustomerName("")
    setCustomerPhone("")
    setCustomerEmail("")
    setTableNumber("")
    setDeliveryAddress({
      street: "",
      number: "",
      city: "",
      zipCode: "",
      notes: "",
    })
    setNotes("")
    setItems([])
  }

  const filteredProducts = products.filter(
    (product) =>
      product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      product.description?.toLowerCase().includes(searchTerm.toLowerCase()),
  )

  const isFormValid = () => {
    if (!customerName) return false
    if (items.length === 0) return false

    if (orderType === "dine_in" && !tableNumber) return false

    if (orderType === "delivery") {
      if (!deliveryAddress.street || !deliveryAddress.number || !deliveryAddress.city) {
        return false
      }
      if (!customerPhone) return false
    }

    return true
  }

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Crear Nuevo Pedido</DialogTitle>
        </DialogHeader>

        <Tabs defaultValue="customer" className="w-full">
          <TabsList className="grid w-full grid-cols-3 mb-4">
            <TabsTrigger value="customer">Información del Cliente</TabsTrigger>
            <TabsTrigger value="products">Productos</TabsTrigger>
            <TabsTrigger value="summary">Resumen</TabsTrigger>
          </TabsList>

          <TabsContent value="customer">
            <div className="space-y-4">
              <div>
                <Label htmlFor="orderType">Tipo de Pedido</Label>
                <Select value={orderType} onValueChange={(value) => setOrderType(value as OrderType)}>
                  <SelectTrigger id="orderType">
                    <SelectValue placeholder="Seleccionar tipo de pedido" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="dine_in">Mesa</SelectItem>
                    <SelectItem value="takeaway">Para llevar</SelectItem>
                    <SelectItem value="delivery">Delivery</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="customerName">Nombre del Cliente *</Label>
                <Input
                  id="customerName"
                  value={customerName}
                  onChange={(e) => setCustomerName(e.target.value)}
                  placeholder="Nombre del cliente"
                  required
                />
              </div>

              <div>
                <Label htmlFor="customerPhone">Teléfono {orderType === "delivery" && "*"}</Label>
                <Input
                  id="customerPhone"
                  value={customerPhone}
                  onChange={(e) => setCustomerPhone(e.target.value)}
                  placeholder="Teléfono del cliente"
                  required={orderType === "delivery"}
                />
              </div>

              <div>
                <Label htmlFor="customerEmail">Email</Label>
                <Input
                  id="customerEmail"
                  type="email"
                  value={customerEmail}
                  onChange={(e) => setCustomerEmail(e.target.value)}
                  placeholder="Email del cliente"
                />
              </div>

              {orderType === "dine_in" && (
                <div>
                  <Label htmlFor="tableNumber">Número de Mesa *</Label>
                  <Input
                    id="tableNumber"
                    value={tableNumber}
                    onChange={(e) => setTableNumber(e.target.value)}
                    placeholder="Número de mesa"
                    required
                  />
                </div>
              )}

              {orderType === "delivery" && (
                <div className="space-y-4">
                  <h3 className="font-medium">Dirección de Entrega *</h3>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="street">Calle *</Label>
                      <Input
                        id="street"
                        value={deliveryAddress.street}
                        onChange={(e) =>
                          setDeliveryAddress({
                            ...deliveryAddress,
                            street: e.target.value,
                          })
                        }
                        placeholder="Calle"
                        required
                      />
                    </div>

                    <div>
                      <Label htmlFor="number">Número *</Label>
                      <Input
                        id="number"
                        value={deliveryAddress.number}
                        onChange={(e) =>
                          setDeliveryAddress({
                            ...deliveryAddress,
                            number: e.target.value,
                          })
                        }
                        placeholder="Número"
                        required
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="city">Ciudad *</Label>
                      <Input
                        id="city"
                        value={deliveryAddress.city}
                        onChange={(e) =>
                          setDeliveryAddress({
                            ...deliveryAddress,
                            city: e.target.value,
                          })
                        }
                        placeholder="Ciudad"
                        required
                      />
                    </div>

                    <div>
                      <Label htmlFor="zipCode">Código Postal</Label>
                      <Input
                        id="zipCode"
                        value={deliveryAddress.zipCode}
                        onChange={(e) =>
                          setDeliveryAddress({
                            ...deliveryAddress,
                            zipCode: e.target.value,
                          })
                        }
                        placeholder="Código Postal"
                      />
                    </div>
                  </div>

                  <div>
                    <Label htmlFor="addressNotes">Notas de Entrega</Label>
                    <Textarea
                      id="addressNotes"
                      value={deliveryAddress.notes}
                      onChange={(e) =>
                        setDeliveryAddress({
                          ...deliveryAddress,
                          notes: e.target.value,
                        })
                      }
                      placeholder="Instrucciones para el repartidor, puntos de referencia, etc."
                    />
                  </div>
                </div>
              )}

              <div>
                <Label htmlFor="notes">Notas del Pedido</Label>
                <Textarea
                  id="notes"
                  value={notes}
                  onChange={(e) => setNotes(e.target.value)}
                  placeholder="Notas adicionales sobre el pedido"
                />
              </div>
            </div>
          </TabsContent>

          <TabsContent value="products">
            <div className="space-y-4">
              <div className="flex gap-2">
                <div className="relative flex-1">
                  <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
                  <Input
                    placeholder="Buscar productos..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-8"
                  />
                </div>
              </div>

              {loading ? (
                <div className="flex justify-center py-8">
                  <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
                </div>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {filteredProducts.length === 0 ? (
                    <div className="col-span-full text-center py-8">
                      <p className="text-muted-foreground">No se encontraron productos</p>
                    </div>
                  ) : (
                    filteredProducts.map((product) => (
                      <div
                        key={product.id}
                        className="border rounded-md p-3 cursor-pointer hover:bg-muted/50 transition-colors"
                        onClick={() => handleAddItem(product)}
                      >
                        <div className="flex gap-3">
                          {product.image && (
                            <div className="w-16 h-16 rounded-md overflow-hidden flex-shrink-0">
                              <img
                                src={product.image || "/placeholder.svg"}
                                alt={product.name}
                                className="w-full h-full object-cover"
                              />
                            </div>
                          )}
                          <div className="flex-1">
                            <h4 className="font-medium">{product.name}</h4>
                            <p className="text-sm text-muted-foreground line-clamp-2">
                              {product.description || "Sin descripción"}
                            </p>
                            <p className="font-medium mt-1">{formatCurrency(product.price)}</p>
                          </div>
                        </div>
                      </div>
                    ))
                  )}
                </div>
              )}

              <div className="mt-6">
                <h3 className="font-medium mb-2">Productos Seleccionados</h3>
                {items.length === 0 ? (
                  <div className="text-center py-4 border rounded-md">
                    <p className="text-muted-foreground">No hay productos seleccionados</p>
                  </div>
                ) : (
                  <div className="space-y-2">
                    {items.map((item) => (
                      <div key={item.id} className="flex items-center justify-between border rounded-md p-3">
                        <div className="flex items-center gap-3">
                          <div className="flex items-center gap-1">
                            <Button
                              variant="outline"
                              size="icon"
                              className="h-6 w-6"
                              onClick={() => handleUpdateQuantity(item.id, item.quantity - 1)}
                            >
                              <Minus className="h-3 w-3" />
                            </Button>
                            <span className="w-8 text-center">{item.quantity}</span>
                            <Button
                              variant="outline"
                              size="icon"
                              className="h-6 w-6"
                              onClick={() => handleUpdateQuantity(item.id, item.quantity + 1)}
                            >
                              <Plus className="h-3 w-3" />
                            </Button>
                          </div>
                          <span>{item.productName}</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <span>{formatCurrency(item.totalPrice)}</span>
                          <Button
                            variant="ghost"
                            size="icon"
                            className="h-8 w-8 text-destructive"
                            onClick={() => handleRemoveItem(item.id)}
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </TabsContent>

          <TabsContent value="summary">
            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h3 className="font-medium mb-2">Información del Cliente</h3>
                  <div className="space-y-1">
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Nombre:</span>
                      <span>{customerName || "No especificado"}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Teléfono:</span>
                      <span>{customerPhone || "No especificado"}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Email:</span>
                      <span>{customerEmail || "No especificado"}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Tipo de Pedido:</span>
                      <span>
                        {orderType === "dine_in" ? "Mesa" : orderType === "takeaway" ? "Para llevar" : "Delivery"}
                      </span>
                    </div>

                    {orderType === "dine_in" && (
                      <div className="flex justify-between">
                        <span className="text-muted-foreground">Mesa:</span>
                        <span>{tableNumber || "No especificado"}</span>
                      </div>
                    )}

                    {orderType === "delivery" && (
                      <div className="mt-2">
                        <div className="text-muted-foreground">Dirección de Entrega:</div>
                        <div className="pl-4">
                          {deliveryAddress.street} {deliveryAddress.number}, {deliveryAddress.city}
                          {deliveryAddress.zipCode && `, ${deliveryAddress.zipCode}`}
                          {deliveryAddress.notes && (
                            <div className="text-sm text-muted-foreground mt-1">Notas: {deliveryAddress.notes}</div>
                          )}
                        </div>
                      </div>
                    )}

                    {notes && (
                      <div className="mt-2">
                        <div className="text-muted-foreground">Notas del Pedido:</div>
                        <div className="pl-4">{notes}</div>
                      </div>
                    )}
                  </div>
                </div>

                <div>
                  <h3 className="font-medium mb-2">Resumen del Pedido</h3>
                  {items.length === 0 ? (
                    <div className="text-center py-4 border rounded-md">
                      <p className="text-muted-foreground">No hay productos seleccionados</p>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      <div className="space-y-2">
                        {items.map((item) => (
                          <div key={item.id} className="flex justify-between">
                            <span>
                              {item.quantity}x {item.productName}
                            </span>
                            <span>{formatCurrency(item.totalPrice)}</span>
                          </div>
                        ))}
                      </div>

                      <div className="border-t pt-2">
                        <div className="flex justify-between">
                          <span>Subtotal</span>
                          <span>{formatCurrency(calculateSubtotal())}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Impuestos (10%)</span>
                          <span>{formatCurrency(calculateTax(calculateSubtotal()))}</span>
                        </div>

                        {orderType === "delivery" && (
                          <div className="flex justify-between">
                            <span>Costo de envío</span>
                            <span>{formatCurrency(5)}</span>
                          </div>
                        )}

                        <div className="flex justify-between font-bold mt-2">
                          <span>Total</span>
                          <span>
                            {formatCurrency(calculateTotal(calculateSubtotal(), calculateTax(calculateSubtotal())))}
                          </span>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </TabsContent>
        </Tabs>

        <DialogFooter>
          <Button variant="outline" onClick={onClose} disabled={submitting}>
            Cancelar
          </Button>
          <Button onClick={handleSubmit} disabled={!isFormValid() || submitting}>
            {submitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            Crear Pedido
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}
